
day9_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800144c  0800144c  0000244c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014a8  080014a8  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080014a8  080014a8  000024a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014b0  080014b0  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b0  080014b0  000024b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014b4  080014b4  000024b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080014b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ba9  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000093f  00000000  00000000  00004c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00005570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000122  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016b0  00000000  00000000  00005842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002476  00000000  00000000  00006ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c3b3  00000000  00000000  00009368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009571b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009bc  00000000  00000000  00095760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  0009611c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  0009613b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001434 	.word	0x08001434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001434 	.word	0x08001434

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80002c8:	4b29      	ldr	r3, [pc, #164]	@ (8000370 <LedInit+0xb0>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a28      	ldr	r2, [pc, #160]	@ (8000370 <LedInit+0xb0>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80002d4:	4b27      	ldr	r3, [pc, #156]	@ (8000374 <LedInit+0xb4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	3201      	adds	r2, #1
 80002de:	2101      	movs	r1, #1
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a22      	ldr	r2, [pc, #136]	@ (8000374 <LedInit+0xb4>)
 80002ea:	400b      	ands	r3, r1
 80002ec:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80002ee:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <LedInit+0xb4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000374 <LedInit+0xb4>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <LedInit+0xb4>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	0052      	lsls	r2, r2, #1
 800030c:	3201      	adds	r2, #1
 800030e:	2101      	movs	r1, #1
 8000310:	4091      	lsls	r1, r2
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	2001      	movs	r0, #1
 8000318:	fa00 f202 	lsl.w	r2, r0, r2
 800031c:	430a      	orrs	r2, r1
 800031e:	43d2      	mvns	r2, r2
 8000320:	4611      	mov	r1, r2
 8000322:	4a14      	ldr	r2, [pc, #80]	@ (8000374 <LedInit+0xb4>)
 8000324:	400b      	ands	r3, r1
 8000326:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <LedInit+0xb4>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	3201      	adds	r2, #1
 8000332:	2101      	movs	r1, #1
 8000334:	4091      	lsls	r1, r2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	0052      	lsls	r2, r2, #1
 800033a:	2001      	movs	r0, #1
 800033c:	fa00 f202 	lsl.w	r2, r0, r2
 8000340:	430a      	orrs	r2, r1
 8000342:	43d2      	mvns	r2, r2
 8000344:	4611      	mov	r1, r2
 8000346:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <LedInit+0xb4>)
 8000348:	400b      	ands	r3, r1
 800034a:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <LedInit+0xb4>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	2101      	movs	r1, #1
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	43d2      	mvns	r2, r2
 800035a:	4611      	mov	r1, r2
 800035c:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <LedInit+0xb4>)
 800035e:	400b      	ands	r3, r1
 8000360:	6053      	str	r3, [r2, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800
 8000374:	40020c00 	.word	0x40020c00

08000378 <LedOn>:

void LedOn(uint32_t pin) {
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000380:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <LedOn+0x28>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	2101      	movs	r1, #1
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	4611      	mov	r1, r2
 800038e:	4a04      	ldr	r2, [pc, #16]	@ (80003a0 <LedOn+0x28>)
 8000390:	430b      	orrs	r3, r1
 8000392:	6153      	str	r3, [r2, #20]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40020c00 	.word	0x40020c00

080003a4 <LedOff>:

void LedOff(uint32_t pin) {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80003ac:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <LedOff+0x2c>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	2101      	movs	r1, #1
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <LedOff+0x2c>)
 80003be:	400b      	ands	r3, r1
 80003c0:	6153      	str	r3, [r2, #20]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40020c00 	.word	0x40020c00

080003d4 <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delay) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f7ff ffca 	bl	8000378 <LedOn>
	DelayMs(delay);
 80003e4:	6838      	ldr	r0, [r7, #0]
 80003e6:	f7ff ff43 	bl	8000270 <DelayMs>
	LedOff(pin);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ffda 	bl	80003a4 <LedOff>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <DelayMs+0x44>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <DelayMs+0x48>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <DelayMs+0x4c>)
 800040c:	fba2 2303 	umull	r2, r3, r2, r3
 8000410:	099b      	lsrs	r3, r3, #6
 8000412:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68ba      	ldr	r2, [r7, #8]
 8000418:	fb02 f303 	mul.w	r3, r2, r3
 800041c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800041e:	bf00      	nop
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <DelayMs+0x44>)
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	1ad2      	subs	r2, r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	429a      	cmp	r2, r3
 800042c:	d3f8      	bcc.n	8000420 <DelayMs+0x28>
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	e0001000 	.word	0xe0001000
 8000440:	20000000 	.word	0x20000000
 8000444:	10624dd3 	.word	0x10624dd3

08000448 <LIS_WriteIO>:
 */

#include "lis3dsh.h"

// Accel IO Functions
void LIS_WriteIO(uint8_t reg, uint8_t data[], uint8_t size) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]
	// enable slave
	SPI_CS_Enable();
 8000458:	f000 fa02 	bl	8000860 <SPI_CS_Enable>
	// write register address
	SPI_Transmit(reg);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f9ca 	bl	80007f8 <SPI_Transmit>
	// write data byte(s)
	for(int i=0; i<size; i++)
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e009      	b.n	800047e <LIS_WriteIO+0x36>
		SPI_Transmit(data[i]);
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f9c0 	bl	80007f8 <SPI_Transmit>
	for(int i=0; i<size; i++)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	429a      	cmp	r2, r3
 8000484:	dbf1      	blt.n	800046a <LIS_WriteIO+0x22>
	// disable slave
	SPI_CS_Disable();
 8000486:	f000 f9f9 	bl	800087c <SPI_CS_Disable>
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <LIS_ReadIO>:

void LIS_ReadIO(uint8_t reg, uint8_t data[], uint8_t size) {
 8000492:	b580      	push	{r7, lr}
 8000494:	b084      	sub	sp, #16
 8000496:	af00      	add	r7, sp, #0
 8000498:	4603      	mov	r3, r0
 800049a:	6039      	str	r1, [r7, #0]
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	4613      	mov	r3, r2
 80004a0:	71bb      	strb	r3, [r7, #6]
	reg |= BV(7); /*bug fixed R=1 */
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a8:	71fb      	strb	r3, [r7, #7]
	// enable slave
	SPI_CS_Enable();
 80004aa:	f000 f9d9 	bl	8000860 <SPI_CS_Enable>
	// write register address
	SPI_Transmit(reg);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f9a1 	bl	80007f8 <SPI_Transmit>
	// read data byte(s)
	for(int i=0; i<size; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	e00b      	b.n	80004d4 <LIS_ReadIO+0x42>
		data[i] = SPI_Receive();
 80004bc:	f000 f9c2 	bl	8000844 <SPI_Receive>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4619      	mov	r1, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	b2ca      	uxtb	r2, r1
 80004cc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	429a      	cmp	r2, r3
 80004da:	dbef      	blt.n	80004bc <LIS_ReadIO+0x2a>
	// disable slave
	SPI_CS_Disable();
 80004dc:	f000 f9ce 	bl	800087c <SPI_CS_Disable>
}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <LIS_Init>:

// Accel Init
void LIS_Init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	// Initialize SPI
	SPI_Init();
 80004ee:	f000 f8ff 	bl	80006f0 <SPI_Init>
	DelayMs(3);
 80004f2:	2003      	movs	r0, #3
 80004f4:	f7ff ff80 	bl	80003f8 <DelayMs>
	// Set Data rate and Enable axes
	uint8_t config = (LIS_DATARATE_25 | LIS_XYZ_ENABLE);
 80004f8:	2347      	movs	r3, #71	@ 0x47
 80004fa:	71fb      	strb	r3, [r7, #7]
	LIS_WriteIO(LIS_CTRL_REG4_ADDR, &config, 1);
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	2020      	movs	r0, #32
 8000504:	f7ff ffa0 	bl	8000448 <LIS_WriteIO>
	DelayMs(3);
 8000508:	2003      	movs	r0, #3
 800050a:	f7ff ff75 	bl	80003f8 <DelayMs>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <LIS_GetData>:

// Accel Get Raw Data
LIS_Data LIS_GetData(void) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t x, y, z;
	// read x low and x high and combine to 16-bit x reading
	LIS_ReadIO(LIS_OUT_X_L_ADDR, data, 2);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	2202      	movs	r2, #2
 8000524:	4619      	mov	r1, r3
 8000526:	2028      	movs	r0, #40	@ 0x28
 8000528:	f7ff ffb3 	bl	8000492 <LIS_ReadIO>
	x = ((uint16_t)data[1] << 8) | data[0];
 800052c:	7c7b      	ldrb	r3, [r7, #17]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	b21a      	sxth	r2, r3
 8000532:	7c3b      	ldrb	r3, [r7, #16]
 8000534:	b21b      	sxth	r3, r3
 8000536:	4313      	orrs	r3, r2
 8000538:	b21b      	sxth	r3, r3
 800053a:	82fb      	strh	r3, [r7, #22]
	// read y low and y high and combine to 16-bit y reading
	LIS_ReadIO(LIS_OUT_Y_L_ADDR, data, 2);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	2202      	movs	r2, #2
 8000542:	4619      	mov	r1, r3
 8000544:	202a      	movs	r0, #42	@ 0x2a
 8000546:	f7ff ffa4 	bl	8000492 <LIS_ReadIO>
	y = ((uint16_t)data[1] << 8) | data[0];
 800054a:	7c7b      	ldrb	r3, [r7, #17]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	7c3b      	ldrb	r3, [r7, #16]
 8000552:	b21b      	sxth	r3, r3
 8000554:	4313      	orrs	r3, r2
 8000556:	b21b      	sxth	r3, r3
 8000558:	82bb      	strh	r3, [r7, #20]
	// read z low and z high and combine to 16-bit z reading
	LIS_ReadIO(LIS_OUT_Z_L_ADDR, data, 2);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	2202      	movs	r2, #2
 8000560:	4619      	mov	r1, r3
 8000562:	202c      	movs	r0, #44	@ 0x2c
 8000564:	f7ff ff95 	bl	8000492 <LIS_ReadIO>
	z = ((uint16_t)data[1] << 8) | data[0];
 8000568:	7c7b      	ldrb	r3, [r7, #17]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	b21a      	sxth	r2, r3
 800056e:	7c3b      	ldrb	r3, [r7, #16]
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b21b      	sxth	r3, r3
 8000576:	827b      	strh	r3, [r7, #18]
	// fill readings in struct and return
	LIS_Data val;
	val.x = x;
 8000578:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800057c:	813b      	strh	r3, [r7, #8]
	val.y = y;
 800057e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000582:	817b      	strh	r3, [r7, #10]
	val.z = z;
 8000584:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000588:	81bb      	strh	r3, [r7, #12]
	return val;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	461a      	mov	r2, r3
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	6010      	str	r0, [r2, #0]
 8000596:	889b      	ldrh	r3, [r3, #4]
 8000598:	8093      	strh	r3, [r2, #4]
}
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <LIS_DRdy>:

// Accel if Ready
int LIS_DRdy(void) {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
	uint8_t status;
	do {
		LIS_ReadIO(LIS_STATUS_ADDR, &status, 1);
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	2027      	movs	r0, #39	@ 0x27
 80005b0:	f7ff ff6f 	bl	8000492 <LIS_ReadIO>
	} while( (status & LIS_STATUS_XYZ_Msk) == 0 );
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f4      	beq.n	80005a8 <LIS_DRdy+0x6>
	return 1;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <DelayMs+0x44>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <DelayMs+0x48>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <DelayMs+0x4c>)
 80005dc:	fba2 2303 	umull	r2, r3, r2, r3
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80005ee:	bf00      	nop
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <DelayMs+0x44>)
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d3f8      	bcc.n	80005f0 <DelayMs+0x28>
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e0001000 	.word	0xe0001000
 8000610:	20000000 	.word	0x20000000
 8000614:	10624dd3 	.word	0x10624dd3

08000618 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	@ 0x38
 800061c:	af02      	add	r7, sp, #8
	char str[32];
	int ret;
	LIS_Data val;
	//LcdInit();
	SystemInit();
 800061e:	f000 f96f 	bl	8000900 <SystemInit>
	LedInit(LED_BLUE);
 8000622:	200f      	movs	r0, #15
 8000624:	f7ff fe4c 	bl	80002c0 <LedInit>
	LedInit(LED_GREEN);
 8000628:	200c      	movs	r0, #12
 800062a:	f7ff fe49 	bl	80002c0 <LedInit>
	LedInit(LED_ORANGE);
 800062e:	200d      	movs	r0, #13
 8000630:	f7ff fe46 	bl	80002c0 <LedInit>
	LedInit(LED_RED);
 8000634:	200e      	movs	r0, #14
 8000636:	f7ff fe43 	bl	80002c0 <LedInit>

	UartInit(BAUD_9600);
 800063a:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800063e:	f000 f995 	bl	800096c <UartInit>
	UartPuts("LIS3DSH Accel Demo!\r\n");
 8000642:	4828      	ldr	r0, [pc, #160]	@ (80006e4 <main+0xcc>)
 8000644:	f000 fa18 	bl	8000a78 <UartPuts>

	//LcdPuts(LCD_LINE1, "ORIENTATION");
	LIS_Init();
 8000648:	f7ff ff4e 	bl	80004e8 <LIS_Init>
	DelayMs(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000650:	f7ff ffba 	bl	80005c8 <DelayMs>
	while(1) {
		ret = LIS_DRdy();
 8000654:	f7ff ffa5 	bl	80005a2 <LIS_DRdy>
 8000658:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(ret) {
 800065a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f9      	beq.n	8000654 <main+0x3c>
			val = LIS_GetData();
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff57 	bl	8000516 <LIS_GetData>
			sprintf(str, "x %d y %d z %d\r\n", val.x, val.y, val.z);
 8000668:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800066c:	461a      	mov	r2, r3
 800066e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000672:	4619      	mov	r1, r3
 8000674:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000678:	f107 000c 	add.w	r0, r7, #12
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	460b      	mov	r3, r1
 8000680:	4919      	ldr	r1, [pc, #100]	@ (80006e8 <main+0xd0>)
 8000682:	f000 fa3f 	bl	8000b04 <siprintf>

			if(val.y<-4000)
 8000686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800068a:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 800068e:	da03      	bge.n	8000698 <main+0x80>
				LedBlink(LED_BLUE, 100);
 8000690:	2164      	movs	r1, #100	@ 0x64
 8000692:	200f      	movs	r0, #15
 8000694:	f7ff fe9e 	bl	80003d4 <LedBlink>

				if(val.y>4000)
 8000698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800069c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80006a0:	dd03      	ble.n	80006aa <main+0x92>
					LedBlink(LED_ORANGE,100);
 80006a2:	2164      	movs	r1, #100	@ 0x64
 80006a4:	200d      	movs	r0, #13
 80006a6:	f7ff fe95 	bl	80003d4 <LedBlink>

				if(val.x<-6000)
 80006aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ae:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <main+0xd4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	da03      	bge.n	80006bc <main+0xa4>
						LedBlink(LED_GREEN,100);
 80006b4:	2164      	movs	r1, #100	@ 0x64
 80006b6:	200c      	movs	r0, #12
 80006b8:	f7ff fe8c 	bl	80003d4 <LedBlink>

					if(val.x>6000)
 80006bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80006c4:	4293      	cmp	r3, r2
 80006c6:	dd03      	ble.n	80006d0 <main+0xb8>
						LedBlink(LED_RED,100);
 80006c8:	2164      	movs	r1, #100	@ 0x64
 80006ca:	200e      	movs	r0, #14
 80006cc:	f7ff fe82 	bl	80003d4 <LedBlink>
			UartPuts(str);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f9cf 	bl	8000a78 <UartPuts>
			DelayMs(100);
 80006da:	2064      	movs	r0, #100	@ 0x64
 80006dc:	f7ff ff74 	bl	80005c8 <DelayMs>
		ret = LIS_DRdy();
 80006e0:	e7b8      	b.n	8000654 <main+0x3c>
 80006e2:	bf00      	nop
 80006e4:	0800144c 	.word	0x0800144c
 80006e8:	08001464 	.word	0x08001464
 80006ec:	ffffe890 	.word	0xffffe890

080006f0 <SPI_Init>:
 *      Author: Nilesh
 */

#include "spi.h"

void SPI_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	// SPI GPIO CS pin config
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80006f4:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <SPI_Init+0xf8>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	4a3b      	ldr	r2, [pc, #236]	@ (80007e8 <SPI_Init+0xf8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOE->MODER &= ~BV(SPI_CS_PIN*2+1); // GPIO mode=OUTPUT(0b01)
 8000700:	4b3a      	ldr	r3, [pc, #232]	@ (80007ec <SPI_Init+0xfc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a39      	ldr	r2, [pc, #228]	@ (80007ec <SPI_Init+0xfc>)
 8000706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800070a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= BV(SPI_CS_PIN*2);
 800070c:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <SPI_Init+0xfc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a36      	ldr	r2, [pc, #216]	@ (80007ec <SPI_Init+0xfc>)
 8000712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000716:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR &= ~BV(SPI_CS_PIN*2+1); // GPIO speed=Medium(0b01)
 8000718:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <SPI_Init+0xfc>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a33      	ldr	r2, [pc, #204]	@ (80007ec <SPI_Init+0xfc>)
 800071e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000722:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= BV(SPI_CS_PIN*2);
 8000724:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <SPI_Init+0xfc>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SPI_Init+0xfc>)
 800072a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800072e:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2)); // GPIO No Pull-up/down (0b00)
 8000730:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <SPI_Init+0xfc>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	4a2d      	ldr	r2, [pc, #180]	@ (80007ec <SPI_Init+0xfc>)
 8000736:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800073a:	60d3      	str	r3, [r2, #12]
	GPIOE->OTYPER &= ~BV(SPI_CS_PIN);	// GPIO push-pull
 800073c:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <SPI_Init+0xfc>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <SPI_Init+0xfc>)
 8000742:	f023 0308 	bic.w	r3, r3, #8
 8000746:	6053      	str	r3, [r2, #4]
	// Disable slave initially
	SPI_CS_Disable();
 8000748:	f000 f898 	bl	800087c <SPI_CS_Disable>

	// SPI GPIO MOSI, MISO, SCLK pin config
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800074c:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <SPI_Init+0xf8>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a25      	ldr	r2, [pc, #148]	@ (80007e8 <SPI_Init+0xf8>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2)); // GPIO mode=AltFn(0b10)
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <SPI_Init+0x100>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a24      	ldr	r2, [pc, #144]	@ (80007f0 <SPI_Init+0x100>)
 800075e:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000762:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SPI_Init+0x100>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SPI_Init+0x100>)
 800076a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800076e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1)); // GPIO speed=Medium(0b01)
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SPI_Init+0x100>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <SPI_Init+0x100>)
 8000776:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 800077a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2));
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <SPI_Init+0x100>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	4a1b      	ldr	r2, [pc, #108]	@ (80007f0 <SPI_Init+0x100>)
 8000782:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000786:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2)); // GPIO Pull-Down (0b10)
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <SPI_Init+0x100>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <SPI_Init+0x100>)
 800078e:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000792:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <SPI_Init+0x100>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <SPI_Init+0x100>)
 800079a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800079e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(SPI_MOSI_PIN)|BV(SPI_MISO_PIN)|BV(SPI_SCLK_PIN));	// GPIO push-pull
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <SPI_Init+0x100>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <SPI_Init+0x100>)
 80007a6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80007aa:	6053      	str	r3, [r2, #4]
	GPIOA->AFR[0] |= (SPI_ALT_FN << GPIO_AFRL_AFSEL5_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL6_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL7_Pos); /* BUG FIXED |= */
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <SPI_Init+0x100>)
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <SPI_Init+0x100>)
 80007b2:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80007b6:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80007ba:	6213      	str	r3, [r2, #32]

	// SPI bus config
	// Enable SPI clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <SPI_Init+0xf8>)
 80007be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c0:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <SPI_Init+0xf8>)
 80007c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c6:	6453      	str	r3, [r2, #68]	@ 0x44
	// CR1: Master=1, BR=0x02(010), LSBF=0, DFF=0 (8-bit), CRCEN=0,
	//		SSM=1 & SSI=1 (Soft Slave Manage), BIDI=0 and RXONLY=0 for Full Duplex,
	//		CPOL=0 and CPHA=0 for LIS3DSH
	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (0x02 << SPI_CR1_BR_Pos);
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <SPI_Init+0x104>)
 80007ca:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80007ce:	601a      	str	r2, [r3, #0]

	// CR2 = Motorola Frame, No intr enabled, No dma enabled, No SS output
	SPI1->CR2 = 0x0000;
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <SPI_Init+0x104>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SPI1->CR1 |= SPI_CR1_SPE; /*bug fixed |= */
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <SPI_Init+0x104>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <SPI_Init+0x104>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40013000 	.word	0x40013000

080007f8 <SPI_Transmit>:

uint16_t SPI_Transmit(uint8_t dataW) {
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	// wait while tx regr is not empty
	while(!(SPI1->SR & SPI_SR_TXE))
 8000802:	bf00      	nop
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <SPI_Transmit+0x48>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <SPI_Transmit+0xc>
		;
	// write given data into spi data regr
	uint32_t frame = dataW;
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	60fb      	str	r3, [r7, #12]
	SPI1->DR = frame;
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <SPI_Transmit+0x48>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	60d3      	str	r3, [r2, #12]
	// wait while rx regr is empty
	while(!(SPI1->SR & SPI_SR_RXNE))
 800081a:	bf00      	nop
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <SPI_Transmit+0x48>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <SPI_Transmit+0x24>
		;
	// read data from spi data regr
	frame = SPI1->DR;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <SPI_Transmit+0x48>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60fb      	str	r3, [r7, #12]
	return frame;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	b29b      	uxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40013000 	.word	0x40013000

08000844 <SPI_Receive>:

uint16_t SPI_Receive(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	// send dummy data (0x00) and receive data from slave
	uint32_t val = SPI_Transmit(0x00);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ffd4 	bl	80007f8 <SPI_Transmit>
 8000850:	4603      	mov	r3, r0
 8000852:	607b      	str	r3, [r7, #4]
	// return received data
	return val;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	b29b      	uxth	r3, r3
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <SPI_CS_Enable>:

void SPI_CS_Enable(void) {
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	// PE.3 = 0 (active low)
	GPIOE->BSRR = BV(SPI_CS_CLR_BIT);
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <SPI_CS_Enable+0x18>)
 8000866:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800086a:	619a      	str	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	// PE.3 = 1 (active low)
	GPIOE->BSRR = BV(SPI_CS_SET_BIT);
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <SPI_CS_Disable+0x14>)
 8000882:	2208      	movs	r2, #8
 8000884:	619a      	str	r2, [r3, #24]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f000 f93e 	bl	8000b44 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20020000 	.word	0x20020000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	20000070 	.word	0x20000070
 80008fc:	200001c0 	.word	0x200001c0

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  DWT_Init();
 8000904:	f000 f802 	bl	800090c <DWT_Init>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <DWT_Init+0x58>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <DWT_Init+0x58>)
 8000916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800091a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <DWT_Init+0x58>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <DWT_Init+0x58>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000926:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <DWT_Init+0x5c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <DWT_Init+0x5c>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <DWT_Init+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <DWT_Init+0x5c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <DWT_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000946:	bf00      	nop
    __ASM volatile ("NOP");
 8000948:	bf00      	nop
    __ASM volatile ("NOP");
 800094a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <DWT_Init+0x5c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000edf0 	.word	0xe000edf0
 8000968:	e0001000 	.word	0xe0001000

0800096c <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000974:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <UartInit+0xd0>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a30      	ldr	r2, [pc, #192]	@ (8000a3c <UartInit+0xd0>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <UartInit+0xd4>)
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <UartInit+0xd4>)
 8000986:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800098a:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <UartInit+0xd4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	@ (8000a40 <UartInit+0xd4>)
 8000992:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000996:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <UartInit+0xd4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <UartInit+0xd4>)
 800099e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80009a2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <UartInit+0xd4>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a25      	ldr	r2, [pc, #148]	@ (8000a40 <UartInit+0xd4>)
 80009aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80009ae:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <UartInit+0xd4>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <UartInit+0xd4>)
 80009b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80009ba:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80009bc:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <UartInit+0xd4>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <UartInit+0xd4>)
 80009c2:	f023 030c 	bic.w	r3, r3, #12
 80009c6:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <UartInit+0xd0>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009cc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <UartInit+0xd0>)
 80009ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d2:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <UartInit+0xd8>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <UartInit+0xd8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <UartInit+0xd8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80009ec:	d016      	beq.n	8000a1c <UartInit+0xb0>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80009f4:	d816      	bhi.n	8000a24 <UartInit+0xb8>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80009fc:	d004      	beq.n	8000a08 <UartInit+0x9c>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000a04:	d005      	beq.n	8000a12 <UartInit+0xa6>
 8000a06:	e00d      	b.n	8000a24 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <UartInit+0xd8>)
 8000a0a:	f240 6283 	movw	r2, #1667	@ 0x683
 8000a0e:	609a      	str	r2, [r3, #8]
			break;
 8000a10:	e008      	b.n	8000a24 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <UartInit+0xd8>)
 8000a14:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000a18:	609a      	str	r2, [r3, #8]
			break;
 8000a1a:	e003      	b.n	8000a24 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <UartInit+0xd8>)
 8000a1e:	228b      	movs	r2, #139	@ 0x8b
 8000a20:	609a      	str	r2, [r3, #8]
			break;
 8000a22:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <UartInit+0xd8>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <UartInit+0xd8>)
 8000a2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40004400 	.word	0x40004400

08000a48 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000a52:	bf00      	nop
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <UartPutch+0x2c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f9      	beq.n	8000a54 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <UartPutch+0x2c>)
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	6053      	str	r3, [r2, #4]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400

08000a78 <UartPuts>:
	// read received byte from RDR
	char ch = USART2->DR;
	return ch;
}

void UartPuts(char str[]) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e009      	b.n	8000a9a <UartPuts+0x22>
		UartPutch(str[i]);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffda 	bl	8000a48 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1ef      	bne.n	8000a86 <UartPuts+0xe>
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f7ff ff24 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f000 f837 	bl	8000b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fd99 	bl	8000618 <main>

08000ae6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   r0, =_estack
 8000ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000af4:	080014b8 	.word	0x080014b8
  ldr r2, =_sbss
 8000af8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000afc:	200001bc 	.word	0x200001bc

08000b00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <siprintf>:
 8000b04:	b40e      	push	{r1, r2, r3}
 8000b06:	b500      	push	{lr}
 8000b08:	b09c      	sub	sp, #112	@ 0x70
 8000b0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8000b0c:	9002      	str	r0, [sp, #8]
 8000b0e:	9006      	str	r0, [sp, #24]
 8000b10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000b14:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <siprintf+0x38>)
 8000b16:	9107      	str	r1, [sp, #28]
 8000b18:	9104      	str	r1, [sp, #16]
 8000b1a:	4909      	ldr	r1, [pc, #36]	@ (8000b40 <siprintf+0x3c>)
 8000b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b20:	9105      	str	r1, [sp, #20]
 8000b22:	6800      	ldr	r0, [r0, #0]
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	a902      	add	r1, sp, #8
 8000b28:	f000 f98c 	bl	8000e44 <_svfiprintf_r>
 8000b2c:	9b02      	ldr	r3, [sp, #8]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	b01c      	add	sp, #112	@ 0x70
 8000b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b38:	b003      	add	sp, #12
 8000b3a:	4770      	bx	lr
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	ffff0208 	.word	0xffff0208

08000b44 <__errno>:
 8000b44:	4b01      	ldr	r3, [pc, #4]	@ (8000b4c <__errno+0x8>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000004 	.word	0x20000004

08000b50 <__libc_init_array>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	4d0d      	ldr	r5, [pc, #52]	@ (8000b88 <__libc_init_array+0x38>)
 8000b54:	4c0d      	ldr	r4, [pc, #52]	@ (8000b8c <__libc_init_array+0x3c>)
 8000b56:	1b64      	subs	r4, r4, r5
 8000b58:	10a4      	asrs	r4, r4, #2
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	42a6      	cmp	r6, r4
 8000b5e:	d109      	bne.n	8000b74 <__libc_init_array+0x24>
 8000b60:	4d0b      	ldr	r5, [pc, #44]	@ (8000b90 <__libc_init_array+0x40>)
 8000b62:	4c0c      	ldr	r4, [pc, #48]	@ (8000b94 <__libc_init_array+0x44>)
 8000b64:	f000 fc66 	bl	8001434 <_init>
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	10a4      	asrs	r4, r4, #2
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	42a6      	cmp	r6, r4
 8000b70:	d105      	bne.n	8000b7e <__libc_init_array+0x2e>
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b78:	4798      	blx	r3
 8000b7a:	3601      	adds	r6, #1
 8000b7c:	e7ee      	b.n	8000b5c <__libc_init_array+0xc>
 8000b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b82:	4798      	blx	r3
 8000b84:	3601      	adds	r6, #1
 8000b86:	e7f2      	b.n	8000b6e <__libc_init_array+0x1e>
 8000b88:	080014b0 	.word	0x080014b0
 8000b8c:	080014b0 	.word	0x080014b0
 8000b90:	080014b0 	.word	0x080014b0
 8000b94:	080014b4 	.word	0x080014b4

08000b98 <__retarget_lock_acquire_recursive>:
 8000b98:	4770      	bx	lr

08000b9a <__retarget_lock_release_recursive>:
 8000b9a:	4770      	bx	lr

08000b9c <_free_r>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	4605      	mov	r5, r0
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	d041      	beq.n	8000c28 <_free_r+0x8c>
 8000ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ba8:	1f0c      	subs	r4, r1, #4
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bfb8      	it	lt
 8000bae:	18e4      	addlt	r4, r4, r3
 8000bb0:	f000 f8e0 	bl	8000d74 <__malloc_lock>
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <_free_r+0x90>)
 8000bb6:	6813      	ldr	r3, [r2, #0]
 8000bb8:	b933      	cbnz	r3, 8000bc8 <_free_r+0x2c>
 8000bba:	6063      	str	r3, [r4, #4]
 8000bbc:	6014      	str	r4, [r2, #0]
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc4:	f000 b8dc 	b.w	8000d80 <__malloc_unlock>
 8000bc8:	42a3      	cmp	r3, r4
 8000bca:	d908      	bls.n	8000bde <_free_r+0x42>
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	1821      	adds	r1, r4, r0
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	bf01      	itttt	eq
 8000bd4:	6819      	ldreq	r1, [r3, #0]
 8000bd6:	685b      	ldreq	r3, [r3, #4]
 8000bd8:	1809      	addeq	r1, r1, r0
 8000bda:	6021      	streq	r1, [r4, #0]
 8000bdc:	e7ed      	b.n	8000bba <_free_r+0x1e>
 8000bde:	461a      	mov	r2, r3
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	b10b      	cbz	r3, 8000be8 <_free_r+0x4c>
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	d9fa      	bls.n	8000bde <_free_r+0x42>
 8000be8:	6811      	ldr	r1, [r2, #0]
 8000bea:	1850      	adds	r0, r2, r1
 8000bec:	42a0      	cmp	r0, r4
 8000bee:	d10b      	bne.n	8000c08 <_free_r+0x6c>
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	4401      	add	r1, r0
 8000bf4:	1850      	adds	r0, r2, r1
 8000bf6:	4283      	cmp	r3, r0
 8000bf8:	6011      	str	r1, [r2, #0]
 8000bfa:	d1e0      	bne.n	8000bbe <_free_r+0x22>
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	6053      	str	r3, [r2, #4]
 8000c02:	4408      	add	r0, r1
 8000c04:	6010      	str	r0, [r2, #0]
 8000c06:	e7da      	b.n	8000bbe <_free_r+0x22>
 8000c08:	d902      	bls.n	8000c10 <_free_r+0x74>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	602b      	str	r3, [r5, #0]
 8000c0e:	e7d6      	b.n	8000bbe <_free_r+0x22>
 8000c10:	6820      	ldr	r0, [r4, #0]
 8000c12:	1821      	adds	r1, r4, r0
 8000c14:	428b      	cmp	r3, r1
 8000c16:	bf04      	itt	eq
 8000c18:	6819      	ldreq	r1, [r3, #0]
 8000c1a:	685b      	ldreq	r3, [r3, #4]
 8000c1c:	6063      	str	r3, [r4, #4]
 8000c1e:	bf04      	itt	eq
 8000c20:	1809      	addeq	r1, r1, r0
 8000c22:	6021      	streq	r1, [r4, #0]
 8000c24:	6054      	str	r4, [r2, #4]
 8000c26:	e7ca      	b.n	8000bbe <_free_r+0x22>
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001b8 	.word	0x200001b8

08000c30 <sbrk_aligned>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	4e0f      	ldr	r6, [pc, #60]	@ (8000c70 <sbrk_aligned+0x40>)
 8000c34:	460c      	mov	r4, r1
 8000c36:	6831      	ldr	r1, [r6, #0]
 8000c38:	4605      	mov	r5, r0
 8000c3a:	b911      	cbnz	r1, 8000c42 <sbrk_aligned+0x12>
 8000c3c:	f000 fba6 	bl	800138c <_sbrk_r>
 8000c40:	6030      	str	r0, [r6, #0]
 8000c42:	4621      	mov	r1, r4
 8000c44:	4628      	mov	r0, r5
 8000c46:	f000 fba1 	bl	800138c <_sbrk_r>
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	d103      	bne.n	8000c56 <sbrk_aligned+0x26>
 8000c4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c52:	4620      	mov	r0, r4
 8000c54:	bd70      	pop	{r4, r5, r6, pc}
 8000c56:	1cc4      	adds	r4, r0, #3
 8000c58:	f024 0403 	bic.w	r4, r4, #3
 8000c5c:	42a0      	cmp	r0, r4
 8000c5e:	d0f8      	beq.n	8000c52 <sbrk_aligned+0x22>
 8000c60:	1a21      	subs	r1, r4, r0
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 fb92 	bl	800138c <_sbrk_r>
 8000c68:	3001      	adds	r0, #1
 8000c6a:	d1f2      	bne.n	8000c52 <sbrk_aligned+0x22>
 8000c6c:	e7ef      	b.n	8000c4e <sbrk_aligned+0x1e>
 8000c6e:	bf00      	nop
 8000c70:	200001b4 	.word	0x200001b4

08000c74 <_malloc_r>:
 8000c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c78:	1ccd      	adds	r5, r1, #3
 8000c7a:	f025 0503 	bic.w	r5, r5, #3
 8000c7e:	3508      	adds	r5, #8
 8000c80:	2d0c      	cmp	r5, #12
 8000c82:	bf38      	it	cc
 8000c84:	250c      	movcc	r5, #12
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	4606      	mov	r6, r0
 8000c8a:	db01      	blt.n	8000c90 <_malloc_r+0x1c>
 8000c8c:	42a9      	cmp	r1, r5
 8000c8e:	d904      	bls.n	8000c9a <_malloc_r+0x26>
 8000c90:	230c      	movs	r3, #12
 8000c92:	6033      	str	r3, [r6, #0]
 8000c94:	2000      	movs	r0, #0
 8000c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d70 <_malloc_r+0xfc>
 8000c9e:	f000 f869 	bl	8000d74 <__malloc_lock>
 8000ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca6:	461c      	mov	r4, r3
 8000ca8:	bb44      	cbnz	r4, 8000cfc <_malloc_r+0x88>
 8000caa:	4629      	mov	r1, r5
 8000cac:	4630      	mov	r0, r6
 8000cae:	f7ff ffbf 	bl	8000c30 <sbrk_aligned>
 8000cb2:	1c43      	adds	r3, r0, #1
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	d158      	bne.n	8000d6a <_malloc_r+0xf6>
 8000cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8000cbc:	4627      	mov	r7, r4
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d143      	bne.n	8000d4a <_malloc_r+0xd6>
 8000cc2:	2c00      	cmp	r4, #0
 8000cc4:	d04b      	beq.n	8000d5e <_malloc_r+0xea>
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	4630      	mov	r0, r6
 8000ccc:	eb04 0903 	add.w	r9, r4, r3
 8000cd0:	f000 fb5c 	bl	800138c <_sbrk_r>
 8000cd4:	4581      	cmp	r9, r0
 8000cd6:	d142      	bne.n	8000d5e <_malloc_r+0xea>
 8000cd8:	6821      	ldr	r1, [r4, #0]
 8000cda:	1a6d      	subs	r5, r5, r1
 8000cdc:	4629      	mov	r1, r5
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f7ff ffa6 	bl	8000c30 <sbrk_aligned>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d03a      	beq.n	8000d5e <_malloc_r+0xea>
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	442b      	add	r3, r5
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	bb62      	cbnz	r2, 8000d50 <_malloc_r+0xdc>
 8000cf6:	f8c8 7000 	str.w	r7, [r8]
 8000cfa:	e00f      	b.n	8000d1c <_malloc_r+0xa8>
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	1b52      	subs	r2, r2, r5
 8000d00:	d420      	bmi.n	8000d44 <_malloc_r+0xd0>
 8000d02:	2a0b      	cmp	r2, #11
 8000d04:	d917      	bls.n	8000d36 <_malloc_r+0xc2>
 8000d06:	1961      	adds	r1, r4, r5
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	6025      	str	r5, [r4, #0]
 8000d0c:	bf18      	it	ne
 8000d0e:	6059      	strne	r1, [r3, #4]
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	bf08      	it	eq
 8000d14:	f8c8 1000 	streq.w	r1, [r8]
 8000d18:	5162      	str	r2, [r4, r5]
 8000d1a:	604b      	str	r3, [r1, #4]
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f82f 	bl	8000d80 <__malloc_unlock>
 8000d22:	f104 000b 	add.w	r0, r4, #11
 8000d26:	1d23      	adds	r3, r4, #4
 8000d28:	f020 0007 	bic.w	r0, r0, #7
 8000d2c:	1ac2      	subs	r2, r0, r3
 8000d2e:	bf1c      	itt	ne
 8000d30:	1a1b      	subne	r3, r3, r0
 8000d32:	50a3      	strne	r3, [r4, r2]
 8000d34:	e7af      	b.n	8000c96 <_malloc_r+0x22>
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	bf0c      	ite	eq
 8000d3c:	f8c8 2000 	streq.w	r2, [r8]
 8000d40:	605a      	strne	r2, [r3, #4]
 8000d42:	e7eb      	b.n	8000d1c <_malloc_r+0xa8>
 8000d44:	4623      	mov	r3, r4
 8000d46:	6864      	ldr	r4, [r4, #4]
 8000d48:	e7ae      	b.n	8000ca8 <_malloc_r+0x34>
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	687f      	ldr	r7, [r7, #4]
 8000d4e:	e7b6      	b.n	8000cbe <_malloc_r+0x4a>
 8000d50:	461a      	mov	r2, r3
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d1fb      	bne.n	8000d50 <_malloc_r+0xdc>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6053      	str	r3, [r2, #4]
 8000d5c:	e7de      	b.n	8000d1c <_malloc_r+0xa8>
 8000d5e:	230c      	movs	r3, #12
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	4630      	mov	r0, r6
 8000d64:	f000 f80c 	bl	8000d80 <__malloc_unlock>
 8000d68:	e794      	b.n	8000c94 <_malloc_r+0x20>
 8000d6a:	6005      	str	r5, [r0, #0]
 8000d6c:	e7d6      	b.n	8000d1c <_malloc_r+0xa8>
 8000d6e:	bf00      	nop
 8000d70:	200001b8 	.word	0x200001b8

08000d74 <__malloc_lock>:
 8000d74:	4801      	ldr	r0, [pc, #4]	@ (8000d7c <__malloc_lock+0x8>)
 8000d76:	f7ff bf0f 	b.w	8000b98 <__retarget_lock_acquire_recursive>
 8000d7a:	bf00      	nop
 8000d7c:	200001b0 	.word	0x200001b0

08000d80 <__malloc_unlock>:
 8000d80:	4801      	ldr	r0, [pc, #4]	@ (8000d88 <__malloc_unlock+0x8>)
 8000d82:	f7ff bf0a 	b.w	8000b9a <__retarget_lock_release_recursive>
 8000d86:	bf00      	nop
 8000d88:	200001b0 	.word	0x200001b0

08000d8c <__ssputs_r>:
 8000d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d90:	688e      	ldr	r6, [r1, #8]
 8000d92:	461f      	mov	r7, r3
 8000d94:	42be      	cmp	r6, r7
 8000d96:	680b      	ldr	r3, [r1, #0]
 8000d98:	4682      	mov	sl, r0
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	4690      	mov	r8, r2
 8000d9e:	d82d      	bhi.n	8000dfc <__ssputs_r+0x70>
 8000da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000da4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000da8:	d026      	beq.n	8000df8 <__ssputs_r+0x6c>
 8000daa:	6965      	ldr	r5, [r4, #20]
 8000dac:	6909      	ldr	r1, [r1, #16]
 8000dae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000db2:	eba3 0901 	sub.w	r9, r3, r1
 8000db6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000dba:	1c7b      	adds	r3, r7, #1
 8000dbc:	444b      	add	r3, r9
 8000dbe:	106d      	asrs	r5, r5, #1
 8000dc0:	429d      	cmp	r5, r3
 8000dc2:	bf38      	it	cc
 8000dc4:	461d      	movcc	r5, r3
 8000dc6:	0553      	lsls	r3, r2, #21
 8000dc8:	d527      	bpl.n	8000e1a <__ssputs_r+0x8e>
 8000dca:	4629      	mov	r1, r5
 8000dcc:	f7ff ff52 	bl	8000c74 <_malloc_r>
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	b360      	cbz	r0, 8000e2e <__ssputs_r+0xa2>
 8000dd4:	6921      	ldr	r1, [r4, #16]
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	f000 fae8 	bl	80013ac <memcpy>
 8000ddc:	89a3      	ldrh	r3, [r4, #12]
 8000dde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de6:	81a3      	strh	r3, [r4, #12]
 8000de8:	6126      	str	r6, [r4, #16]
 8000dea:	6165      	str	r5, [r4, #20]
 8000dec:	444e      	add	r6, r9
 8000dee:	eba5 0509 	sub.w	r5, r5, r9
 8000df2:	6026      	str	r6, [r4, #0]
 8000df4:	60a5      	str	r5, [r4, #8]
 8000df6:	463e      	mov	r6, r7
 8000df8:	42be      	cmp	r6, r7
 8000dfa:	d900      	bls.n	8000dfe <__ssputs_r+0x72>
 8000dfc:	463e      	mov	r6, r7
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	4632      	mov	r2, r6
 8000e02:	4641      	mov	r1, r8
 8000e04:	f000 faa8 	bl	8001358 <memmove>
 8000e08:	68a3      	ldr	r3, [r4, #8]
 8000e0a:	1b9b      	subs	r3, r3, r6
 8000e0c:	60a3      	str	r3, [r4, #8]
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	4433      	add	r3, r6
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	2000      	movs	r0, #0
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	462a      	mov	r2, r5
 8000e1c:	f000 fad4 	bl	80013c8 <_realloc_r>
 8000e20:	4606      	mov	r6, r0
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d1e0      	bne.n	8000de8 <__ssputs_r+0x5c>
 8000e26:	6921      	ldr	r1, [r4, #16]
 8000e28:	4650      	mov	r0, sl
 8000e2a:	f7ff feb7 	bl	8000b9c <_free_r>
 8000e2e:	230c      	movs	r3, #12
 8000e30:	f8ca 3000 	str.w	r3, [sl]
 8000e34:	89a3      	ldrh	r3, [r4, #12]
 8000e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3a:	81a3      	strh	r3, [r4, #12]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e40:	e7e9      	b.n	8000e16 <__ssputs_r+0x8a>
	...

08000e44 <_svfiprintf_r>:
 8000e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e48:	4698      	mov	r8, r3
 8000e4a:	898b      	ldrh	r3, [r1, #12]
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	b09d      	sub	sp, #116	@ 0x74
 8000e50:	4607      	mov	r7, r0
 8000e52:	460d      	mov	r5, r1
 8000e54:	4614      	mov	r4, r2
 8000e56:	d510      	bpl.n	8000e7a <_svfiprintf_r+0x36>
 8000e58:	690b      	ldr	r3, [r1, #16]
 8000e5a:	b973      	cbnz	r3, 8000e7a <_svfiprintf_r+0x36>
 8000e5c:	2140      	movs	r1, #64	@ 0x40
 8000e5e:	f7ff ff09 	bl	8000c74 <_malloc_r>
 8000e62:	6028      	str	r0, [r5, #0]
 8000e64:	6128      	str	r0, [r5, #16]
 8000e66:	b930      	cbnz	r0, 8000e76 <_svfiprintf_r+0x32>
 8000e68:	230c      	movs	r3, #12
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e70:	b01d      	add	sp, #116	@ 0x74
 8000e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e76:	2340      	movs	r3, #64	@ 0x40
 8000e78:	616b      	str	r3, [r5, #20]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e7e:	2320      	movs	r3, #32
 8000e80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e88:	2330      	movs	r3, #48	@ 0x30
 8000e8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001028 <_svfiprintf_r+0x1e4>
 8000e8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e92:	f04f 0901 	mov.w	r9, #1
 8000e96:	4623      	mov	r3, r4
 8000e98:	469a      	mov	sl, r3
 8000e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e9e:	b10a      	cbz	r2, 8000ea4 <_svfiprintf_r+0x60>
 8000ea0:	2a25      	cmp	r2, #37	@ 0x25
 8000ea2:	d1f9      	bne.n	8000e98 <_svfiprintf_r+0x54>
 8000ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ea8:	d00b      	beq.n	8000ec2 <_svfiprintf_r+0x7e>
 8000eaa:	465b      	mov	r3, fp
 8000eac:	4622      	mov	r2, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	f7ff ff6b 	bl	8000d8c <__ssputs_r>
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	f000 80a7 	beq.w	800100a <_svfiprintf_r+0x1c6>
 8000ebc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ebe:	445a      	add	r2, fp
 8000ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 809f 	beq.w	800100a <_svfiprintf_r+0x1c6>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ed6:	f10a 0a01 	add.w	sl, sl, #1
 8000eda:	9304      	str	r3, [sp, #16]
 8000edc:	9307      	str	r3, [sp, #28]
 8000ede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ee2:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ee4:	4654      	mov	r4, sl
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eec:	484e      	ldr	r0, [pc, #312]	@ (8001028 <_svfiprintf_r+0x1e4>)
 8000eee:	f7ff f96f 	bl	80001d0 <memchr>
 8000ef2:	9a04      	ldr	r2, [sp, #16]
 8000ef4:	b9d8      	cbnz	r0, 8000f2e <_svfiprintf_r+0xea>
 8000ef6:	06d0      	lsls	r0, r2, #27
 8000ef8:	bf44      	itt	mi
 8000efa:	2320      	movmi	r3, #32
 8000efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f00:	0711      	lsls	r1, r2, #28
 8000f02:	bf44      	itt	mi
 8000f04:	232b      	movmi	r3, #43	@ 0x2b
 8000f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8000f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f10:	d015      	beq.n	8000f3e <_svfiprintf_r+0xfa>
 8000f12:	9a07      	ldr	r2, [sp, #28]
 8000f14:	4654      	mov	r4, sl
 8000f16:	2000      	movs	r0, #0
 8000f18:	f04f 0c0a 	mov.w	ip, #10
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f22:	3b30      	subs	r3, #48	@ 0x30
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d94b      	bls.n	8000fc0 <_svfiprintf_r+0x17c>
 8000f28:	b1b0      	cbz	r0, 8000f58 <_svfiprintf_r+0x114>
 8000f2a:	9207      	str	r2, [sp, #28]
 8000f2c:	e014      	b.n	8000f58 <_svfiprintf_r+0x114>
 8000f2e:	eba0 0308 	sub.w	r3, r0, r8
 8000f32:	fa09 f303 	lsl.w	r3, r9, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	46a2      	mov	sl, r4
 8000f3c:	e7d2      	b.n	8000ee4 <_svfiprintf_r+0xa0>
 8000f3e:	9b03      	ldr	r3, [sp, #12]
 8000f40:	1d19      	adds	r1, r3, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	9103      	str	r1, [sp, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bfbb      	ittet	lt
 8000f4a:	425b      	neglt	r3, r3
 8000f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8000f50:	9307      	strge	r3, [sp, #28]
 8000f52:	9307      	strlt	r3, [sp, #28]
 8000f54:	bfb8      	it	lt
 8000f56:	9204      	strlt	r2, [sp, #16]
 8000f58:	7823      	ldrb	r3, [r4, #0]
 8000f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f5c:	d10a      	bne.n	8000f74 <_svfiprintf_r+0x130>
 8000f5e:	7863      	ldrb	r3, [r4, #1]
 8000f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f62:	d132      	bne.n	8000fca <_svfiprintf_r+0x186>
 8000f64:	9b03      	ldr	r3, [sp, #12]
 8000f66:	1d1a      	adds	r2, r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	9203      	str	r2, [sp, #12]
 8000f6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f70:	3402      	adds	r4, #2
 8000f72:	9305      	str	r3, [sp, #20]
 8000f74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001038 <_svfiprintf_r+0x1f4>
 8000f78:	7821      	ldrb	r1, [r4, #0]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4650      	mov	r0, sl
 8000f7e:	f7ff f927 	bl	80001d0 <memchr>
 8000f82:	b138      	cbz	r0, 8000f94 <_svfiprintf_r+0x150>
 8000f84:	9b04      	ldr	r3, [sp, #16]
 8000f86:	eba0 000a 	sub.w	r0, r0, sl
 8000f8a:	2240      	movs	r2, #64	@ 0x40
 8000f8c:	4082      	lsls	r2, r0
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	3401      	adds	r4, #1
 8000f92:	9304      	str	r3, [sp, #16]
 8000f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f98:	4824      	ldr	r0, [pc, #144]	@ (800102c <_svfiprintf_r+0x1e8>)
 8000f9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f9e:	2206      	movs	r2, #6
 8000fa0:	f7ff f916 	bl	80001d0 <memchr>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d036      	beq.n	8001016 <_svfiprintf_r+0x1d2>
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <_svfiprintf_r+0x1ec>)
 8000faa:	bb1b      	cbnz	r3, 8000ff4 <_svfiprintf_r+0x1b0>
 8000fac:	9b03      	ldr	r3, [sp, #12]
 8000fae:	3307      	adds	r3, #7
 8000fb0:	f023 0307 	bic.w	r3, r3, #7
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	9303      	str	r3, [sp, #12]
 8000fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000fba:	4433      	add	r3, r6
 8000fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fbe:	e76a      	b.n	8000e96 <_svfiprintf_r+0x52>
 8000fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <_svfiprintf_r+0xd8>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	3401      	adds	r4, #1
 8000fce:	9305      	str	r3, [sp, #20]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 0c0a 	mov.w	ip, #10
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fdc:	3a30      	subs	r2, #48	@ 0x30
 8000fde:	2a09      	cmp	r2, #9
 8000fe0:	d903      	bls.n	8000fea <_svfiprintf_r+0x1a6>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0c6      	beq.n	8000f74 <_svfiprintf_r+0x130>
 8000fe6:	9105      	str	r1, [sp, #20]
 8000fe8:	e7c4      	b.n	8000f74 <_svfiprintf_r+0x130>
 8000fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fee:	4604      	mov	r4, r0
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e7f0      	b.n	8000fd6 <_svfiprintf_r+0x192>
 8000ff4:	ab03      	add	r3, sp, #12
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	462a      	mov	r2, r5
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <_svfiprintf_r+0x1f0>)
 8000ffc:	a904      	add	r1, sp, #16
 8000ffe:	4638      	mov	r0, r7
 8001000:	f3af 8000 	nop.w
 8001004:	1c42      	adds	r2, r0, #1
 8001006:	4606      	mov	r6, r0
 8001008:	d1d6      	bne.n	8000fb8 <_svfiprintf_r+0x174>
 800100a:	89ab      	ldrh	r3, [r5, #12]
 800100c:	065b      	lsls	r3, r3, #25
 800100e:	f53f af2d 	bmi.w	8000e6c <_svfiprintf_r+0x28>
 8001012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001014:	e72c      	b.n	8000e70 <_svfiprintf_r+0x2c>
 8001016:	ab03      	add	r3, sp, #12
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	462a      	mov	r2, r5
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <_svfiprintf_r+0x1f0>)
 800101e:	a904      	add	r1, sp, #16
 8001020:	4638      	mov	r0, r7
 8001022:	f000 f879 	bl	8001118 <_printf_i>
 8001026:	e7ed      	b.n	8001004 <_svfiprintf_r+0x1c0>
 8001028:	08001475 	.word	0x08001475
 800102c:	0800147f 	.word	0x0800147f
 8001030:	00000000 	.word	0x00000000
 8001034:	08000d8d 	.word	0x08000d8d
 8001038:	0800147b 	.word	0x0800147b

0800103c <_printf_common>:
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	4616      	mov	r6, r2
 8001042:	4698      	mov	r8, r3
 8001044:	688a      	ldr	r2, [r1, #8]
 8001046:	690b      	ldr	r3, [r1, #16]
 8001048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800104c:	4293      	cmp	r3, r2
 800104e:	bfb8      	it	lt
 8001050:	4613      	movlt	r3, r2
 8001052:	6033      	str	r3, [r6, #0]
 8001054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001058:	4607      	mov	r7, r0
 800105a:	460c      	mov	r4, r1
 800105c:	b10a      	cbz	r2, 8001062 <_printf_common+0x26>
 800105e:	3301      	adds	r3, #1
 8001060:	6033      	str	r3, [r6, #0]
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	0699      	lsls	r1, r3, #26
 8001066:	bf42      	ittt	mi
 8001068:	6833      	ldrmi	r3, [r6, #0]
 800106a:	3302      	addmi	r3, #2
 800106c:	6033      	strmi	r3, [r6, #0]
 800106e:	6825      	ldr	r5, [r4, #0]
 8001070:	f015 0506 	ands.w	r5, r5, #6
 8001074:	d106      	bne.n	8001084 <_printf_common+0x48>
 8001076:	f104 0a19 	add.w	sl, r4, #25
 800107a:	68e3      	ldr	r3, [r4, #12]
 800107c:	6832      	ldr	r2, [r6, #0]
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	42ab      	cmp	r3, r5
 8001082:	dc26      	bgt.n	80010d2 <_printf_common+0x96>
 8001084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	3b00      	subs	r3, #0
 800108c:	bf18      	it	ne
 800108e:	2301      	movne	r3, #1
 8001090:	0692      	lsls	r2, r2, #26
 8001092:	d42b      	bmi.n	80010ec <_printf_common+0xb0>
 8001094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001098:	4641      	mov	r1, r8
 800109a:	4638      	mov	r0, r7
 800109c:	47c8      	blx	r9
 800109e:	3001      	adds	r0, #1
 80010a0:	d01e      	beq.n	80010e0 <_printf_common+0xa4>
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	6922      	ldr	r2, [r4, #16]
 80010a6:	f003 0306 	and.w	r3, r3, #6
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf02      	ittt	eq
 80010ae:	68e5      	ldreq	r5, [r4, #12]
 80010b0:	6833      	ldreq	r3, [r6, #0]
 80010b2:	1aed      	subeq	r5, r5, r3
 80010b4:	68a3      	ldr	r3, [r4, #8]
 80010b6:	bf0c      	ite	eq
 80010b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010bc:	2500      	movne	r5, #0
 80010be:	4293      	cmp	r3, r2
 80010c0:	bfc4      	itt	gt
 80010c2:	1a9b      	subgt	r3, r3, r2
 80010c4:	18ed      	addgt	r5, r5, r3
 80010c6:	2600      	movs	r6, #0
 80010c8:	341a      	adds	r4, #26
 80010ca:	42b5      	cmp	r5, r6
 80010cc:	d11a      	bne.n	8001104 <_printf_common+0xc8>
 80010ce:	2000      	movs	r0, #0
 80010d0:	e008      	b.n	80010e4 <_printf_common+0xa8>
 80010d2:	2301      	movs	r3, #1
 80010d4:	4652      	mov	r2, sl
 80010d6:	4641      	mov	r1, r8
 80010d8:	4638      	mov	r0, r7
 80010da:	47c8      	blx	r9
 80010dc:	3001      	adds	r0, #1
 80010de:	d103      	bne.n	80010e8 <_printf_common+0xac>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e8:	3501      	adds	r5, #1
 80010ea:	e7c6      	b.n	800107a <_printf_common+0x3e>
 80010ec:	18e1      	adds	r1, r4, r3
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	2030      	movs	r0, #48	@ 0x30
 80010f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80010f6:	4422      	add	r2, r4
 80010f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80010fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001100:	3302      	adds	r3, #2
 8001102:	e7c7      	b.n	8001094 <_printf_common+0x58>
 8001104:	2301      	movs	r3, #1
 8001106:	4622      	mov	r2, r4
 8001108:	4641      	mov	r1, r8
 800110a:	4638      	mov	r0, r7
 800110c:	47c8      	blx	r9
 800110e:	3001      	adds	r0, #1
 8001110:	d0e6      	beq.n	80010e0 <_printf_common+0xa4>
 8001112:	3601      	adds	r6, #1
 8001114:	e7d9      	b.n	80010ca <_printf_common+0x8e>
	...

08001118 <_printf_i>:
 8001118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800111c:	7e0f      	ldrb	r7, [r1, #24]
 800111e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001120:	2f78      	cmp	r7, #120	@ 0x78
 8001122:	4691      	mov	r9, r2
 8001124:	4680      	mov	r8, r0
 8001126:	460c      	mov	r4, r1
 8001128:	469a      	mov	sl, r3
 800112a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800112e:	d807      	bhi.n	8001140 <_printf_i+0x28>
 8001130:	2f62      	cmp	r7, #98	@ 0x62
 8001132:	d80a      	bhi.n	800114a <_printf_i+0x32>
 8001134:	2f00      	cmp	r7, #0
 8001136:	f000 80d2 	beq.w	80012de <_printf_i+0x1c6>
 800113a:	2f58      	cmp	r7, #88	@ 0x58
 800113c:	f000 80b9 	beq.w	80012b2 <_printf_i+0x19a>
 8001140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001148:	e03a      	b.n	80011c0 <_printf_i+0xa8>
 800114a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800114e:	2b15      	cmp	r3, #21
 8001150:	d8f6      	bhi.n	8001140 <_printf_i+0x28>
 8001152:	a101      	add	r1, pc, #4	@ (adr r1, 8001158 <_printf_i+0x40>)
 8001154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001158:	080011b1 	.word	0x080011b1
 800115c:	080011c5 	.word	0x080011c5
 8001160:	08001141 	.word	0x08001141
 8001164:	08001141 	.word	0x08001141
 8001168:	08001141 	.word	0x08001141
 800116c:	08001141 	.word	0x08001141
 8001170:	080011c5 	.word	0x080011c5
 8001174:	08001141 	.word	0x08001141
 8001178:	08001141 	.word	0x08001141
 800117c:	08001141 	.word	0x08001141
 8001180:	08001141 	.word	0x08001141
 8001184:	080012c5 	.word	0x080012c5
 8001188:	080011ef 	.word	0x080011ef
 800118c:	0800127f 	.word	0x0800127f
 8001190:	08001141 	.word	0x08001141
 8001194:	08001141 	.word	0x08001141
 8001198:	080012e7 	.word	0x080012e7
 800119c:	08001141 	.word	0x08001141
 80011a0:	080011ef 	.word	0x080011ef
 80011a4:	08001141 	.word	0x08001141
 80011a8:	08001141 	.word	0x08001141
 80011ac:	08001287 	.word	0x08001287
 80011b0:	6833      	ldr	r3, [r6, #0]
 80011b2:	1d1a      	adds	r2, r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6032      	str	r2, [r6, #0]
 80011b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80011c0:	2301      	movs	r3, #1
 80011c2:	e09d      	b.n	8001300 <_printf_i+0x1e8>
 80011c4:	6833      	ldr	r3, [r6, #0]
 80011c6:	6820      	ldr	r0, [r4, #0]
 80011c8:	1d19      	adds	r1, r3, #4
 80011ca:	6031      	str	r1, [r6, #0]
 80011cc:	0606      	lsls	r6, r0, #24
 80011ce:	d501      	bpl.n	80011d4 <_printf_i+0xbc>
 80011d0:	681d      	ldr	r5, [r3, #0]
 80011d2:	e003      	b.n	80011dc <_printf_i+0xc4>
 80011d4:	0645      	lsls	r5, r0, #25
 80011d6:	d5fb      	bpl.n	80011d0 <_printf_i+0xb8>
 80011d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80011dc:	2d00      	cmp	r5, #0
 80011de:	da03      	bge.n	80011e8 <_printf_i+0xd0>
 80011e0:	232d      	movs	r3, #45	@ 0x2d
 80011e2:	426d      	negs	r5, r5
 80011e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011e8:	4859      	ldr	r0, [pc, #356]	@ (8001350 <_printf_i+0x238>)
 80011ea:	230a      	movs	r3, #10
 80011ec:	e011      	b.n	8001212 <_printf_i+0xfa>
 80011ee:	6821      	ldr	r1, [r4, #0]
 80011f0:	6833      	ldr	r3, [r6, #0]
 80011f2:	0608      	lsls	r0, r1, #24
 80011f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80011f8:	d402      	bmi.n	8001200 <_printf_i+0xe8>
 80011fa:	0649      	lsls	r1, r1, #25
 80011fc:	bf48      	it	mi
 80011fe:	b2ad      	uxthmi	r5, r5
 8001200:	2f6f      	cmp	r7, #111	@ 0x6f
 8001202:	4853      	ldr	r0, [pc, #332]	@ (8001350 <_printf_i+0x238>)
 8001204:	6033      	str	r3, [r6, #0]
 8001206:	bf14      	ite	ne
 8001208:	230a      	movne	r3, #10
 800120a:	2308      	moveq	r3, #8
 800120c:	2100      	movs	r1, #0
 800120e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001212:	6866      	ldr	r6, [r4, #4]
 8001214:	60a6      	str	r6, [r4, #8]
 8001216:	2e00      	cmp	r6, #0
 8001218:	bfa2      	ittt	ge
 800121a:	6821      	ldrge	r1, [r4, #0]
 800121c:	f021 0104 	bicge.w	r1, r1, #4
 8001220:	6021      	strge	r1, [r4, #0]
 8001222:	b90d      	cbnz	r5, 8001228 <_printf_i+0x110>
 8001224:	2e00      	cmp	r6, #0
 8001226:	d04b      	beq.n	80012c0 <_printf_i+0x1a8>
 8001228:	4616      	mov	r6, r2
 800122a:	fbb5 f1f3 	udiv	r1, r5, r3
 800122e:	fb03 5711 	mls	r7, r3, r1, r5
 8001232:	5dc7      	ldrb	r7, [r0, r7]
 8001234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001238:	462f      	mov	r7, r5
 800123a:	42bb      	cmp	r3, r7
 800123c:	460d      	mov	r5, r1
 800123e:	d9f4      	bls.n	800122a <_printf_i+0x112>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d10b      	bne.n	800125c <_printf_i+0x144>
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	07df      	lsls	r7, r3, #31
 8001248:	d508      	bpl.n	800125c <_printf_i+0x144>
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	4299      	cmp	r1, r3
 8001250:	bfde      	ittt	le
 8001252:	2330      	movle	r3, #48	@ 0x30
 8001254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001258:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800125c:	1b92      	subs	r2, r2, r6
 800125e:	6122      	str	r2, [r4, #16]
 8001260:	f8cd a000 	str.w	sl, [sp]
 8001264:	464b      	mov	r3, r9
 8001266:	aa03      	add	r2, sp, #12
 8001268:	4621      	mov	r1, r4
 800126a:	4640      	mov	r0, r8
 800126c:	f7ff fee6 	bl	800103c <_printf_common>
 8001270:	3001      	adds	r0, #1
 8001272:	d14a      	bne.n	800130a <_printf_i+0x1f2>
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001278:	b004      	add	sp, #16
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	4833      	ldr	r0, [pc, #204]	@ (8001354 <_printf_i+0x23c>)
 8001288:	2778      	movs	r7, #120	@ 0x78
 800128a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	6831      	ldr	r1, [r6, #0]
 8001292:	061f      	lsls	r7, r3, #24
 8001294:	f851 5b04 	ldr.w	r5, [r1], #4
 8001298:	d402      	bmi.n	80012a0 <_printf_i+0x188>
 800129a:	065f      	lsls	r7, r3, #25
 800129c:	bf48      	it	mi
 800129e:	b2ad      	uxthmi	r5, r5
 80012a0:	6031      	str	r1, [r6, #0]
 80012a2:	07d9      	lsls	r1, r3, #31
 80012a4:	bf44      	itt	mi
 80012a6:	f043 0320 	orrmi.w	r3, r3, #32
 80012aa:	6023      	strmi	r3, [r4, #0]
 80012ac:	b11d      	cbz	r5, 80012b6 <_printf_i+0x19e>
 80012ae:	2310      	movs	r3, #16
 80012b0:	e7ac      	b.n	800120c <_printf_i+0xf4>
 80012b2:	4827      	ldr	r0, [pc, #156]	@ (8001350 <_printf_i+0x238>)
 80012b4:	e7e9      	b.n	800128a <_printf_i+0x172>
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	f023 0320 	bic.w	r3, r3, #32
 80012bc:	6023      	str	r3, [r4, #0]
 80012be:	e7f6      	b.n	80012ae <_printf_i+0x196>
 80012c0:	4616      	mov	r6, r2
 80012c2:	e7bd      	b.n	8001240 <_printf_i+0x128>
 80012c4:	6833      	ldr	r3, [r6, #0]
 80012c6:	6825      	ldr	r5, [r4, #0]
 80012c8:	6961      	ldr	r1, [r4, #20]
 80012ca:	1d18      	adds	r0, r3, #4
 80012cc:	6030      	str	r0, [r6, #0]
 80012ce:	062e      	lsls	r6, r5, #24
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	d501      	bpl.n	80012d8 <_printf_i+0x1c0>
 80012d4:	6019      	str	r1, [r3, #0]
 80012d6:	e002      	b.n	80012de <_printf_i+0x1c6>
 80012d8:	0668      	lsls	r0, r5, #25
 80012da:	d5fb      	bpl.n	80012d4 <_printf_i+0x1bc>
 80012dc:	8019      	strh	r1, [r3, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	6123      	str	r3, [r4, #16]
 80012e2:	4616      	mov	r6, r2
 80012e4:	e7bc      	b.n	8001260 <_printf_i+0x148>
 80012e6:	6833      	ldr	r3, [r6, #0]
 80012e8:	1d1a      	adds	r2, r3, #4
 80012ea:	6032      	str	r2, [r6, #0]
 80012ec:	681e      	ldr	r6, [r3, #0]
 80012ee:	6862      	ldr	r2, [r4, #4]
 80012f0:	2100      	movs	r1, #0
 80012f2:	4630      	mov	r0, r6
 80012f4:	f7fe ff6c 	bl	80001d0 <memchr>
 80012f8:	b108      	cbz	r0, 80012fe <_printf_i+0x1e6>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	6060      	str	r0, [r4, #4]
 80012fe:	6863      	ldr	r3, [r4, #4]
 8001300:	6123      	str	r3, [r4, #16]
 8001302:	2300      	movs	r3, #0
 8001304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001308:	e7aa      	b.n	8001260 <_printf_i+0x148>
 800130a:	6923      	ldr	r3, [r4, #16]
 800130c:	4632      	mov	r2, r6
 800130e:	4649      	mov	r1, r9
 8001310:	4640      	mov	r0, r8
 8001312:	47d0      	blx	sl
 8001314:	3001      	adds	r0, #1
 8001316:	d0ad      	beq.n	8001274 <_printf_i+0x15c>
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	079b      	lsls	r3, r3, #30
 800131c:	d413      	bmi.n	8001346 <_printf_i+0x22e>
 800131e:	68e0      	ldr	r0, [r4, #12]
 8001320:	9b03      	ldr	r3, [sp, #12]
 8001322:	4298      	cmp	r0, r3
 8001324:	bfb8      	it	lt
 8001326:	4618      	movlt	r0, r3
 8001328:	e7a6      	b.n	8001278 <_printf_i+0x160>
 800132a:	2301      	movs	r3, #1
 800132c:	4632      	mov	r2, r6
 800132e:	4649      	mov	r1, r9
 8001330:	4640      	mov	r0, r8
 8001332:	47d0      	blx	sl
 8001334:	3001      	adds	r0, #1
 8001336:	d09d      	beq.n	8001274 <_printf_i+0x15c>
 8001338:	3501      	adds	r5, #1
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	9903      	ldr	r1, [sp, #12]
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	42ab      	cmp	r3, r5
 8001342:	dcf2      	bgt.n	800132a <_printf_i+0x212>
 8001344:	e7eb      	b.n	800131e <_printf_i+0x206>
 8001346:	2500      	movs	r5, #0
 8001348:	f104 0619 	add.w	r6, r4, #25
 800134c:	e7f5      	b.n	800133a <_printf_i+0x222>
 800134e:	bf00      	nop
 8001350:	08001486 	.word	0x08001486
 8001354:	08001497 	.word	0x08001497

08001358 <memmove>:
 8001358:	4288      	cmp	r0, r1
 800135a:	b510      	push	{r4, lr}
 800135c:	eb01 0402 	add.w	r4, r1, r2
 8001360:	d902      	bls.n	8001368 <memmove+0x10>
 8001362:	4284      	cmp	r4, r0
 8001364:	4623      	mov	r3, r4
 8001366:	d807      	bhi.n	8001378 <memmove+0x20>
 8001368:	1e43      	subs	r3, r0, #1
 800136a:	42a1      	cmp	r1, r4
 800136c:	d008      	beq.n	8001380 <memmove+0x28>
 800136e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001376:	e7f8      	b.n	800136a <memmove+0x12>
 8001378:	4402      	add	r2, r0
 800137a:	4601      	mov	r1, r0
 800137c:	428a      	cmp	r2, r1
 800137e:	d100      	bne.n	8001382 <memmove+0x2a>
 8001380:	bd10      	pop	{r4, pc}
 8001382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800138a:	e7f7      	b.n	800137c <memmove+0x24>

0800138c <_sbrk_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4d06      	ldr	r5, [pc, #24]	@ (80013a8 <_sbrk_r+0x1c>)
 8001390:	2300      	movs	r3, #0
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	602b      	str	r3, [r5, #0]
 8001398:	f7ff fa7c 	bl	8000894 <_sbrk>
 800139c:	1c43      	adds	r3, r0, #1
 800139e:	d102      	bne.n	80013a6 <_sbrk_r+0x1a>
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	b103      	cbz	r3, 80013a6 <_sbrk_r+0x1a>
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	200001ac 	.word	0x200001ac

080013ac <memcpy>:
 80013ac:	440a      	add	r2, r1
 80013ae:	4291      	cmp	r1, r2
 80013b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80013b4:	d100      	bne.n	80013b8 <memcpy+0xc>
 80013b6:	4770      	bx	lr
 80013b8:	b510      	push	{r4, lr}
 80013ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013c2:	4291      	cmp	r1, r2
 80013c4:	d1f9      	bne.n	80013ba <memcpy+0xe>
 80013c6:	bd10      	pop	{r4, pc}

080013c8 <_realloc_r>:
 80013c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013cc:	4680      	mov	r8, r0
 80013ce:	4615      	mov	r5, r2
 80013d0:	460c      	mov	r4, r1
 80013d2:	b921      	cbnz	r1, 80013de <_realloc_r+0x16>
 80013d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013d8:	4611      	mov	r1, r2
 80013da:	f7ff bc4b 	b.w	8000c74 <_malloc_r>
 80013de:	b92a      	cbnz	r2, 80013ec <_realloc_r+0x24>
 80013e0:	f7ff fbdc 	bl	8000b9c <_free_r>
 80013e4:	2400      	movs	r4, #0
 80013e6:	4620      	mov	r0, r4
 80013e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ec:	f000 f81a 	bl	8001424 <_malloc_usable_size_r>
 80013f0:	4285      	cmp	r5, r0
 80013f2:	4606      	mov	r6, r0
 80013f4:	d802      	bhi.n	80013fc <_realloc_r+0x34>
 80013f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80013fa:	d8f4      	bhi.n	80013e6 <_realloc_r+0x1e>
 80013fc:	4629      	mov	r1, r5
 80013fe:	4640      	mov	r0, r8
 8001400:	f7ff fc38 	bl	8000c74 <_malloc_r>
 8001404:	4607      	mov	r7, r0
 8001406:	2800      	cmp	r0, #0
 8001408:	d0ec      	beq.n	80013e4 <_realloc_r+0x1c>
 800140a:	42b5      	cmp	r5, r6
 800140c:	462a      	mov	r2, r5
 800140e:	4621      	mov	r1, r4
 8001410:	bf28      	it	cs
 8001412:	4632      	movcs	r2, r6
 8001414:	f7ff ffca 	bl	80013ac <memcpy>
 8001418:	4621      	mov	r1, r4
 800141a:	4640      	mov	r0, r8
 800141c:	f7ff fbbe 	bl	8000b9c <_free_r>
 8001420:	463c      	mov	r4, r7
 8001422:	e7e0      	b.n	80013e6 <_realloc_r+0x1e>

08001424 <_malloc_usable_size_r>:
 8001424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001428:	1f18      	subs	r0, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	bfbc      	itt	lt
 800142e:	580b      	ldrlt	r3, [r1, r0]
 8001430:	18c0      	addlt	r0, r0, r3
 8001432:	4770      	bx	lr

08001434 <_init>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	bf00      	nop
 8001438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143a:	bc08      	pop	{r3}
 800143c:	469e      	mov	lr, r3
 800143e:	4770      	bx	lr

08001440 <_fini>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr
